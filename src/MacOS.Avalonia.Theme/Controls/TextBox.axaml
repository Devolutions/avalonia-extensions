<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

  <ResourceDictionary.MergedDictionaries>
    <ResourceInclude Source="/Accents/ThemeResources.axaml" />
  </ResourceDictionary.MergedDictionaries>

  <Design.PreviewWith>
    <!-- <ThemeVariantScope RequestedThemeVariant="Dark"> -->
    <Border Background="#f0f0f0">
      <Border Background="{DynamicResource LayoutBackgroundLowBrush}">
        <StackPanel Margin="20" Width="300" Spacing="10" HorizontalAlignment="Left">
          <TextBlock>Name:</TextBlock>
          <TextBox Watermark="Enter your name">MyServer</TextBox>
          <TextBlock>Password:</TextBlock>
          <TextBox PasswordChar="*" Watermark="Enter your password" />
          <TextBlock>Notes:</TextBlock>
          <TextBox Height="100" AcceptsReturn="True" TextWrapping="Wrap" />
          <TextBox InnerLeftContent="http://" />
          <TextBox InnerRightContent=".com" />
          <TextBox
            InnerLeftContent="http://"
            InnerRightContent=".com" />
          <TextBox Classes="clearButton">With 'Clear' button</TextBox>
          <TextBox Watermark="Enter your name" IsEnabled="False" />
          <TextBox PasswordChar="•" Classes="revealPasswordButton">Reveal Password</TextBox>
          <TextBox PasswordChar="•" Classes="revealPasswordButton" RevealPassword="True">Password Revealed</TextBox>
          <TextBlock>Custom Height:</TextBlock>
          <StackPanel Orientation="Horizontal">
            <TextBox Watermark="Type here" Height="30" Width="250" VerticalContentAlignment="Center" />
            <Button Content="..." Height="30" Width="30" />
          </StackPanel>
        </StackPanel>
      </Border>
    </Border>
    <!-- </ThemeVariantScope> -->
  </Design.PreviewWith>

  <MenuFlyout x:Key="DefaultTextBoxContextFlyout">
    <MenuItem Header="{DynamicResource StringTextFlyoutCutText}" Command="{Binding $parent[TextBox].Cut}"
              IsEnabled="{Binding $parent[TextBox].CanCut}" InputGesture="{x:Static TextBox.CutGesture}" />
    <MenuItem Header="{DynamicResource StringTextFlyoutCopyText}" Command="{Binding $parent[TextBox].Copy}"
              IsEnabled="{Binding $parent[TextBox].CanCopy}" InputGesture="{x:Static TextBox.CopyGesture}" />
    <MenuItem Header="{DynamicResource StringTextFlyoutPasteText}" Command="{Binding $parent[TextBox].Paste}"
              IsEnabled="{Binding $parent[TextBox].CanPaste}" InputGesture="{x:Static TextBox.PasteGesture}" />
  </MenuFlyout>
  <MenuFlyout x:Key="HorizontalTextBoxContextFlyout"
              FlyoutPresenterTheme="{StaticResource HorizontalMenuFlyoutPresenter}"
              ItemContainerTheme="{StaticResource HorizontalMenuItem}">
    <MenuItem Header="{DynamicResource StringTextFlyoutCutText}" Command="{Binding $parent[TextBox].Cut}"
              IsEnabled="{Binding $parent[TextBox].CanCut}" IsVisible="{Binding $parent[TextBox].CanCut}" />
    <MenuItem Header="{DynamicResource StringTextFlyoutCopyText}" Command="{Binding $parent[TextBox].Copy}"
              IsEnabled="{Binding $parent[TextBox].CanCopy}" IsVisible="{Binding $parent[TextBox].CanCopy}" />
    <MenuItem Header="{DynamicResource StringTextFlyoutPasteText}" Command="{Binding $parent[TextBox].Paste}"
              IsEnabled="{Binding $parent[TextBox].CanPaste}" />
  </MenuFlyout>

  <ControlTheme x:Key="FluentTextBoxButton" TargetType="Button">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Width" Value="13" />
    <Setter Property="Height" Value="13" />
    <Setter Property="Margin" Value="0 0 5 0" />
    <Setter Property="TextElement.Foreground" Value="{DynamicResource TextControlButtonForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <ContentPresenter Name="PART_ContentPresenter"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            Content="{TemplateBinding Content}"
                            Padding="{TemplateBinding Padding}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style Selector="^:disabled /template/ ContentPresenter">
      <Setter Property="Opacity" Value="0" />
    </Style>
  </ControlTheme>

  <ControlTheme x:Key="FluentTextBoxToggleButton"
                TargetType="ToggleButton"
                BasedOn="{StaticResource FluentTextBoxButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <ContentPresenter Name="PART_ContentPresenter"
                            Background="{TemplateBinding Background}"
                            Content="{TemplateBinding Content}"
                            Padding="{TemplateBinding Padding}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox">
    <Setter Property="Foreground" Value="{DynamicResource ForegroundHighBrush}" />
    <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}" />
    <Setter Property="CaretBrush" Value="{DynamicResource SystemAccentColor}" />
    <Setter Property="FontSize">
      <Setter.Value>
        <MultiBinding Converter="{StaticResource RevealPasswordToFontSizeConverter}">
          <Binding RelativeSource="{RelativeSource Self}" Path="PasswordChar" />
          <Binding RelativeSource="{RelativeSource Self}" Path="RevealPassword" />
          <Binding Source="{StaticResource ControlFontSize}" />
          <Binding Source="{StaticResource PasswordHiddenFontSize}" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="SelectionBrush" Value="{DynamicResource TextBoxSelectionHighlightBrush}" />
    <!-- <Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" /> TODO: make this a style? Class: rounded true/false -->
    <Setter Property="MinHeight" Value="27" />
    <Setter Property="MinWidth" Value="{DynamicResource TextControlThemeMinWidth}" />
    <Setter Property="FocusAdorner" Value="{x:Null}" />
    <Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True" />
    <Setter Property="ContextFlyout"
            Value="{OnFormFactor Desktop={StaticResource DefaultTextBoxContextFlyout}, Mobile={StaticResource HorizontalTextBoxContextFlyout}}" />
    <Setter Property="ScrollViewer.AllowAutoHide" Value="False" />
    <Setter Property="Template">
      <ControlTemplate>
        <DataValidationErrors>
          <Panel>
            <Border Name="PART_BorderElement"
                    Height="{TemplateBinding Height}"
                    BorderThickness="1"
                    BorderBrush="Transparent"
                    BoxShadow="{DynamicResource TextBoxBorderShadows}"
                    Background="{TemplateBinding Background}">
              <Grid ColumnDefinitions="Auto,*,Auto">
                <ContentPresenter Name="PrefixContent"
                                  Grid.Column="0"
                                  Content="{TemplateBinding InnerLeftContent}"
                                  Padding="3 2 3 1">
                  <ContentPresenter.IsVisible>
                    <Binding RelativeSource="{RelativeSource Self}" Path="Content"
                             Converter="{x:Static StringConverters.IsNotNullOrEmpty}" />
                  </ContentPresenter.IsVisible>
                </ContentPresenter>
                <DockPanel Name="PART_InnerDockPanel"
                           Grid.Column="1"
                           Margin="2 2 3 1 ">
                  <ScrollViewer Name="PART_ScrollViewer"
                                Margin="0 0 -4 0"
                                HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                                VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}"
                                IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
                                AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}"
                                BringIntoViewOnFocusChange="{TemplateBinding (ScrollViewer.BringIntoViewOnFocusChange)}">
                    <Panel>
                      <TextBlock Name="PART_Watermark"
                                 Foreground="{DynamicResource ForegroundLowBrush}"
                                 FontSize="{DynamicResource ControlFontSize}"
                                 Text="{TemplateBinding Watermark}"
                                 TextAlignment="{TemplateBinding TextAlignment}"
                                 TextWrapping="{TemplateBinding TextWrapping}"
                                 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <TextBlock.IsVisible>
                          <MultiBinding Converter="{x:Static BoolConverters.And}">
                            <Binding ElementName="PART_TextPresenter" Path="PreeditText"
                                     Converter="{x:Static StringConverters.IsNullOrEmpty}" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Text"
                                     Converter="{x:Static StringConverters.IsNullOrEmpty}" />
                          </MultiBinding>
                        </TextBlock.IsVisible>
                      </TextBlock>
                      <TextPresenter Name="PART_TextPresenter"
                                     Text="{TemplateBinding Text, Mode=TwoWay}"
                                     CaretBlinkInterval="{TemplateBinding CaretBlinkInterval}"
                                     CaretIndex="{TemplateBinding CaretIndex}"
                                     SelectionStart="{TemplateBinding SelectionStart}"
                                     SelectionEnd="{TemplateBinding SelectionEnd}"
                                     TextAlignment="{TemplateBinding TextAlignment}"
                                     TextWrapping="{TemplateBinding TextWrapping}"
                                     LineHeight="{TemplateBinding LineHeight}"
                                     LetterSpacing="{TemplateBinding LetterSpacing}"
                                     RevealPassword="{TemplateBinding RevealPassword}"
                                     SelectionBrush="{TemplateBinding SelectionBrush}"
                                     SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
                                     CaretBrush="{TemplateBinding CaretBrush}"
                                     HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalAlignment="Center">
                        <TextPresenter.PasswordChar>
                          <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="PasswordChar"
                                   Converter="{StaticResource CharToMacOsPasswordCharConverter}" />
                        </TextPresenter.PasswordChar>
                      </TextPresenter>
                    </Panel>
                    <ScrollViewer.Styles>
                      <Style Selector="ScrollContentPresenter#PART_ContentPresenter">
                        <Setter Property="Cursor" Value="IBeam" />
                      </Style>
                    </ScrollViewer.Styles>
                  </ScrollViewer>
                </DockPanel>
                <ContentPresenter Name="SuffixContent"
                                  Grid.Column="2"
                                  Padding="3 2 3 1"
                                  Content="{TemplateBinding InnerRightContent}">
                  <ContentPresenter.IsVisible>
                    <Binding RelativeSource="{RelativeSource Self}" Path="Content"
                             Converter="{x:Static StringConverters.IsNotNullOrEmpty}" />
                  </ContentPresenter.IsVisible>
                </ContentPresenter>
              </Grid>
            </Border>
            <Border Name="FocusBorderElement"
                    Height="{TemplateBinding Height}"
                    BorderThickness="3"
                    CornerRadius="3" />
          </Panel>
        </DataValidationErrors>
      </ControlTemplate>
    </Setter>

    <!-- Disabled State -->
    <Style Selector="^:disabled">
      <Setter Property="Foreground" Value="{DynamicResource ForegroundLowBrush}" />

      <Style Selector="^ /template/ Border#InnerBorderElement">
        <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundDisabledHighBrush}" />
      </Style>
    </Style>

    <!-- Focused State -->
    <Style Selector="^:focus">
      <Style Selector="^ /template/ Border#FocusBorderElement">
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderFocusBrush}" />
      </Style>
    </Style>

    <Style Selector="^:error /template/ Border#PART_BorderElement">
      <Setter Property="BorderBrush" Value="{DynamicResource SystemControlErrorTextForegroundBrush}" />
    </Style>

    <Style Selector="^.revealPasswordButton[AcceptsReturn=False][IsReadOnly=False]:not(TextBox:empty)">
      <Setter Property="InnerRightContent">
        <Template>
          <ToggleButton Name="PasswordRevealButton"
                        Theme="{StaticResource FluentTextBoxToggleButton}"
                        IsChecked="{Binding $parent[TextBox].RevealPassword, Mode=TwoWay}"
                        ClipToBounds="True">
            <Panel>
              <PathIcon Data="{StaticResource PasswordRevealPath}"
                        Height="9" Width="12"
                        IsVisible="{Binding !$parent[ToggleButton].IsChecked}" />
              <PathIcon Data="{StaticResource PasswordHidePath}"
                        Height="12" Width="12"
                        IsVisible="{Binding $parent[ToggleButton].IsChecked}" />
            </Panel>
          </ToggleButton>
        </Template>
      </Setter>
    </Style>

    <Style Selector="^[AcceptsReturn=True] /template/ TextPresenter#PART_TextPresenter">
      <Setter Property="VerticalAlignment" Value="Top" />
    </Style>

    <Style Selector="^.clearButton[AcceptsReturn=False][IsReadOnly=False]:focus:not(TextBox:empty)">
      <Setter Property="InnerRightContent">
        <Template>
          <Button Theme="{StaticResource FluentTextBoxButton}"
                  Command="{Binding $parent[TextBox].Clear}"
                  ClipToBounds="True"
                  Background="{DynamicResource TextBoxClearButtonBackgroundBrush}"
                  CornerRadius="7">
            <PathIcon Data="{StaticResource XShapePath}" Height="5" Width="5"
                      Foreground="{DynamicResource ControlForegroundAccentHighBrush}" />
          </Button>
        </Template>
      </Setter>
    </Style>
  </ControlTheme>
</ResourceDictionary>