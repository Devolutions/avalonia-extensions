<ResourceDictionary
  xmlns="https://github.com/avaloniaui"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:behaviors="clr-namespace:Devolutions.AvaloniaControls.Behaviors"
  x:ClassModifier="internal">
  <Design.PreviewWith>
    <Panel Width="400" Height="400">
      <EditableComboBox
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Watermark="test">
        <EditableComboBoxItem Value="test" />
        <EditableComboBoxItem Value="search highlight" Classes="search-highlight" />
        <EditableComboBoxItem Value="secondary search highlight" Classes="secondary-search-highlight" />
      </EditableComboBox>
    </Panel>
  </Design.PreviewWith>

  <Thickness x:Key="EditableComboBoxBorderThickness">1</Thickness>
  <Thickness x:Key="EditableComboBoxPadding">10,5,0,5</Thickness>
  <x:Double x:Key="EditableComboBoxMinWidth">100</x:Double>
  <x:Double x:Key="EditableComboBoxHeight">32</x:Double>
  <x:Double x:Key="EditableComboBoxItemsHeight">32</x:Double>
  <SolidColorBrush x:Key="ComboBoxBackgroundBorderBrushFocused" Color="{DynamicResource SystemAccentColor}" />

  <MenuFlyout x:Key="DefaultTextBoxContextFlyout">
    <MenuItem Header="{DynamicResource StringTextFlyoutCutText}" Command="{Binding $parent[TextBox].Cut}"
              IsEnabled="{Binding $parent[TextBox].CanCut}" InputGesture="{x:Static TextBox.CutGesture}" />
    <MenuItem Header="{DynamicResource StringTextFlyoutCopyText}" Command="{Binding $parent[TextBox].Copy}"
              IsEnabled="{Binding $parent[TextBox].CanCopy}" InputGesture="{x:Static TextBox.CopyGesture}" />
    <MenuItem Header="{DynamicResource StringTextFlyoutPasteText}" Command="{Binding $parent[TextBox].Paste}"
              IsEnabled="{Binding $parent[TextBox].CanPaste}" InputGesture="{x:Static TextBox.PasteGesture}" />
  </MenuFlyout>
  <MenuFlyout x:Key="HorizontalTextBoxContextFlyout" FlyoutPresenterTheme="{StaticResource HorizontalMenuFlyoutPresenter}"
              ItemContainerTheme="{StaticResource HorizontalMenuItem}">
    <MenuItem Header="{DynamicResource StringTextFlyoutCutText}" Command="{Binding $parent[TextBox].Cut}"
              IsEnabled="{Binding $parent[TextBox].CanCut}" IsVisible="{Binding $parent[TextBox].CanCut}" />
    <MenuItem Header="{DynamicResource StringTextFlyoutCopyText}" Command="{Binding $parent[TextBox].Copy}"
              IsEnabled="{Binding $parent[TextBox].CanCopy}" IsVisible="{Binding $parent[TextBox].CanCopy}" />
    <MenuItem Header="{DynamicResource StringTextFlyoutPasteText}" Command="{Binding $parent[TextBox].Paste}"
              IsEnabled="{Binding $parent[TextBox].CanPaste}" />
  </MenuFlyout>

  <ControlTheme x:Key="{x:Type EditableComboBoxItem}" TargetType="EditableComboBoxItem" x:DataType="EditableComboBoxItem">
    <Setter Property="IsHitTestVisible" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForeground}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Padding" Value="{DynamicResource ComboBoxItemThemePadding}" />
    <Setter Property="Height" Value="{DynamicResource EditableComboBoxItemsHeight}" />
    <Setter Property="Template">
      <ControlTemplate>
        <Border Name="PART_Background" Padding="{TemplateBinding Padding}">
          <StackPanel Orientation="Horizontal" Spacing="5" HorizontalAlignment="Stretch">
            <SearchHighlightTextBlock
              Name="PART_Text"
              Content="{TemplateBinding Value}"
              Search="{TemplateBinding FilterHighlightText}"
              VerticalAlignment="Center" />
            <TextBlock
              Name="PART_SearchHighlightText"
              Text="{TemplateBinding Value}"
              Foreground="{DynamicResource SearchHighlightForeground}"
              Background="{DynamicResource SearchHighlightBackground}"
              VerticalAlignment="Center" />
            <TextBlock
              Name="PART_SecondarySearchHighlightText"
              Text="{TemplateBinding Value}"
              Foreground="{DynamicResource SecondarySearchHighlightForeground}"
              Background="{DynamicResource SecondarySearchHighlightBackground}"
              VerticalAlignment="Center" />
          </StackPanel>
        </Border>
      </ControlTemplate>
    </Setter>

    <!-- Search highlight -->
    <Style Selector="^ /template/ SearchHighlightTextBlock#PART_Text">
      <Setter Property="IsVisible" Value="True" />
    </Style>
    <Style Selector="^ /template/ TextBlock#PART_SearchHighlightText, ^ /template/ TextBlock#PART_SecondarySearchHighlightText">
      <Setter Property="IsVisible" Value="False" />
    </Style>
    <Style Selector="^.search-highlight">
      <Style Selector="^ /template/ SearchHighlightTextBlock#PART_Text">
        <Setter Property="IsVisible" Value="False" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PART_SearchHighlightText">
        <Setter Property="IsVisible" Value="True" />
      </Style>
    </Style>
    <Style Selector="^.secondary-search-highlight">
      <Style Selector="^ /template/ SearchHighlightTextBlock#PART_Text">
        <Setter Property="IsVisible" Value="False" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PART_SecondarySearchHighlightText">
        <Setter Property="IsVisible" Value="True" />
      </Style>
    </Style>

    <Style Selector="^ /template/ Border#PART_Background">
      <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style Selector="^:pointerover /template/ Border#PART_Background">
      <Setter Property="Background" Value="{DynamicResource ComboBoxItemBackgroundPointerOver}" />
      <Style Selector="^ TextBlock#PART_Text">
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundPointerOver}" />
      </Style>
    </Style>

    <Style Selector="^[IsSelected=True] /template/ Border#PART_Background">
      <Setter Property="Background" Value="{DynamicResource ComboBoxItemBackgroundPointerOver}" />
      <Style Selector="^ TextBlock#PART_Text">
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundPointerOver}" />
      </Style>
    </Style>

    <Style Selector="^:disabled /template/ Border#PART_Background">
      <Setter Property="Background" Value="{DynamicResource ComboBoxItemBackgroundDisabled}" />
      <Style Selector="^ TextBlock#PART_Text">
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundDisabled}" />
      </Style>
    </Style>


    <Style Selector="^:pressed /template/ TextBlock">
      <Setter Property="Background" Value="{DynamicResource ComboBoxItemBackgroundPressed}" />
      <Style Selector="^ TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemForegroundPressed}" />
      </Style>
    </Style>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type EditableComboBox+InnerTextBox}"
                TargetType="EditableComboBox+InnerTextBox">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="CornerRadius" Value="0" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="MinWidth" Value="1" />
    <Setter Property="Cursor" Value="IBeam" />
    <Setter Property="Margin"
            Value="{Binding 
            Padding, 
            RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox},
            Converter={x:Static DevoConverters.ThicknessExtractor}, 
            ConverterParameter={x:Static ThicknessSubset.AllButRight}
        }" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FocusAdorner" Value="{x:Null}" />
    <Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ContextFlyout"
            Value="{OnFormFactor Desktop={StaticResource DefaultTextBoxContextFlyout}, Mobile={StaticResource HorizontalTextBoxContextFlyout}}" />
    <Setter Property="Template">
      <ControlTemplate>
        <DockPanel x:Name="PART_InnerDockPanel"
                   Margin="{TemplateBinding Padding}">
          <ScrollViewer
            Name="PART_ScrollViewer"
            HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
            VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}"
            IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
            AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}"
            BringIntoViewOnFocusChange="{TemplateBinding (ScrollViewer.BringIntoViewOnFocusChange)}">
            <Panel>
              <TextBlock
                Name="PART_Watermark"
                Opacity="0.5"
                Text="{TemplateBinding Watermark}"
                TextAlignment="{TemplateBinding TextAlignment}"
                TextWrapping="{TemplateBinding TextWrapping}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <TextBlock.IsVisible>
                  <MultiBinding Converter="{x:Static BoolConverters.And}">
                    <Binding ElementName="PART_TextPresenter" Path="PreeditText"
                             Converter="{x:Static StringConverters.IsNullOrEmpty}" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Text"
                             Converter="{x:Static StringConverters.IsNullOrEmpty}" />
                  </MultiBinding>
                </TextBlock.IsVisible>
              </TextBlock>
              <TextPresenter
                Name="PART_TextPresenter"
                Text="{TemplateBinding Text, Mode=TwoWay}"
                CaretBlinkInterval="{TemplateBinding CaretBlinkInterval}"
                CaretIndex="{TemplateBinding CaretIndex}"
                SelectionStart="{TemplateBinding SelectionStart}"
                SelectionEnd="{TemplateBinding SelectionEnd}"
                TextAlignment="{TemplateBinding TextAlignment}"
                TextWrapping="{TemplateBinding TextWrapping}"
                LineHeight="{TemplateBinding LineHeight}"
                LetterSpacing="{TemplateBinding LetterSpacing}"
                PasswordChar="{TemplateBinding PasswordChar}"
                RevealPassword="{TemplateBinding RevealPassword}"
                SelectionBrush="{TemplateBinding SelectionBrush}"
                SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
                CaretBrush="{TemplateBinding CaretBrush}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Panel>
          </ScrollViewer>
        </DockPanel>
      </ControlTemplate>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type EditableComboBox+InnerComboBox}" TargetType="EditableComboBox+InnerComboBox">
    <Setter Property="FocusAdorner" Value="{x:Null}" />
    <Setter Property="MaxDropDownHeight" Value="504" />
    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}, Mode=OneWay}" />
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}, Mode=OneWay}" />
    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}, Mode=OneWay}" />
    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}, Mode=OneWay}" />
    <Setter Property="CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}, Mode=OneWay}" />
    <Setter Property="Padding" Value="{Binding Padding, RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}, Mode=OneWay}" />
    <Setter Property="MinHeight" Value="{Binding MinHeight, RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}, Mode=OneWay}" />
    <Setter Property="InnerLeftContent" Value="{Binding InnerLeftContent, RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}, Mode=OneWay}" />
    <Setter Property="InnerRightContent" Value="{Binding InnerRightContent, RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}, Mode=OneWay}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="PlaceholderForeground" Value="{DynamicResource ComboBoxPlaceHolderForeground}" />
    <Setter Property="Template">
      <ControlTemplate>
        <DataValidationErrors>
          <Grid ColumnDefinitions="Auto,*,32,Auto" HorizontalAlignment="Stretch">
            <Border x:Name="Background"
                    Grid.Column="0"
                    Grid.ColumnSpan="4"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    MinWidth="{DynamicResource ComboBoxThemeMinWidth}" />
            <Border x:Name="HighlightBackground"
                    Grid.Column="0"
                    Grid.ColumnSpan="4"
                    Background="Transparent"
                    BorderBrush="{DynamicResource ComboBoxBackgroundBorderBrushFocused}"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    IsVisible="False" />

            <ItemsControl
              Name="PART_InnerLeftContent"
              Grid.Column="0"
              ItemsSource="{TemplateBinding InnerLeftContent}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel Name="PART_InnerLeftContentPanel" Orientation="Horizontal"
                              Margin="2 2 0 2" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
            </ItemsControl>

            <ContentPresenter x:Name="PART_TextBoxPresenter"
                              Grid.Column="1" />

            <Border x:Name="DropDownOverlay"
                    Grid.Column="2"
                    Background="Transparent"
                    Margin="0,1,1,1"
                    Width="30"
                    IsVisible="False"
                    HorizontalAlignment="Right" />

            <PathIcon x:Name="DropDownGlyph"
                      Grid.Column="2"
                      UseLayoutRounding="False"
                      IsHitTestVisible="False"
                      Height="12"
                      Width="12"
                      Margin="0,0,10,0"
                      HorizontalAlignment="Right"
                      VerticalAlignment="Center"
                      Foreground="{TemplateBinding Foreground}"
                      Data="M1939 486L2029 576L1024 1581L19 576L109 486L1024 1401L1939 486Z" />

            <ItemsControl
              Grid.Column="3"
              Name="PART_InnerRightContent"
              ItemsSource="{TemplateBinding InnerRightContent}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel Name="PART_InnerRightContentPanel" Orientation="Horizontal"
                              Margin="0 2 3 2" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
            </ItemsControl>

            <!-- ReSharper disable once Xaml.MissingGridIndex -->
            <Popup
              Name="PART_Popup"
              WindowManagerAddShadowHint="False"
              IsOpen="{TemplateBinding IsDropDownOpen, Mode=TwoWay}"
              MinWidth="{Binding Bounds.Width, RelativeSource={RelativeSource TemplatedParent}}"
              MaxWidth="{TemplateBinding MaxDropDownWidth}"
              MaxHeight="{TemplateBinding MaxDropDownHeight}"
              Placement="AnchorAndGravity"
              PlacementAnchor="BottomLeft"
              PlacementGravity="BottomRight"
              HorizontalAlignment="Stretch"
              HorizontalOffset="0"
              VerticalOffset="0"
              IsLightDismissEnabled="True"
              OverlayDismissEventPassThrough="True"
              InheritsTransform="True">
              <Interaction.Behaviors>
                <behaviors:PositionedPopupBehavior
                  PositionToTemplatedParent="True"
                  InjectFusionMask="True"
                  PopupBorderThickness="{
                    Binding FocusedBorderThickness, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}
                  }" />
              </Interaction.Behaviors>

              <Border
                x:Name="PopupBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{DynamicResource ComboBoxDropDownBorderBrush}"
                BorderThickness="{DynamicResource ComboBoxDropdownBorderThickness}"
                Padding="{DynamicResource ComboBoxDropdownBorderPadding}"
                HorizontalAlignment="Stretch"
                CornerRadius="{DynamicResource OverlayCornerRadius}">
                <ScrollViewer
                  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}">
                  <ItemsPresenter
                    Name="PART_ItemsPresenter"
                    Margin="{DynamicResource ComboBoxDropdownContentMargin}"
                    ItemsPanel="{TemplateBinding ItemsPanel}" />
                </ScrollViewer>
              </Border>
            </Popup>
          </Grid>
        </DataValidationErrors>
      </ControlTemplate>
    </Setter>

    <Style Selector="^ /template/ Border#HighlightBackground">
      <Setter Property="BorderThickness"
              Value="{
                Binding FocusedBorderThickness, 
                RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}
            }" />
    </Style>
    <Style Selector="^:dropdownopen /template/ Border#HighlightBackground">
      <Setter Property="BorderThickness"
              Value="{
                Binding FocusedBorderThickness, 
                RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox},
                Converter={x:Static DevoConverters.ThicknessExtractor}, 
                ConverterParameter={x:Static ThicknessSubset.AllButBottom}
            }" />
    </Style>
    <Style Selector="^:dropdownopen:dropdown-open-from-top /template/ Border#HighlightBackground">
      <Setter Property="BorderThickness"
              Value="{
                Binding FocusedBorderThickness, 
                RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox},
                Converter={x:Static DevoConverters.ThicknessExtractor}, 
                ConverterParameter={x:Static ThicknessSubset.AllButTop}
            }" />
    </Style>

    <Style Selector="^:is-cut-by-screen-edge /template/ Border#HighlightBackground">
      <Setter Property="BorderThickness"
              Value="{
                Binding FocusedBorderThickness, 
                RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}
            }" />
    </Style>

    <Style Selector="^">
      <Setter Property="CornerRadius"
              Value="{
                Binding CornerRadius, 
                RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}
            }" />
    </Style>

    <Style
      Selector="^:dropdownopen /template/ Border#Background, ^:dropdownopen /template/ Border#HighlightBackground">
      <Setter Property="CornerRadius"
              Value="{
                Binding CornerRadius,
                RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox},
                Converter={x:Static DevoConverters.CornerRadiusExtractor}, 
                ConverterParameter={x:Static CornerRadiusSubset.Top}
            }" />
    </Style>
    <Style
      Selector="^:dropdownopen:dropdown-open-from-top /template/ Border#Background, ^:dropdownopen:dropdown-open-from-top /template/ Border#HighlightBackground">
      <Setter Property="CornerRadius"
              Value="{
                        Binding CornerRadius,
                        RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox},
                        Converter={x:Static DevoConverters.CornerRadiusExtractor}, 
                        ConverterParameter={x:Static CornerRadiusSubset.Bottom}
                    }" />
    </Style>

    <Style
      Selector="^:is-cut-by-screen-edge /template/ Border#Background, ^:is-cut-by-screen-edge /template/ Border#HighlightBackground">
      <Setter Property="CornerRadius"
              Value="{
                        Binding CornerRadius,
                        RelativeSource={RelativeSource FindAncestor, AncestorType=EditableComboBox}
                    }" />
    </Style>

    <!-- Error State -->
    <Style Selector="^:error /template/ Border#Background">
      <Setter Property="BorderBrush" Value="{DynamicResource SystemControlErrorTextForegroundBrush}" />
    </Style>

    <!--  Focus Pressed State  -->
    <Style Selector="^:focused:pressed">
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxDropDownGlyphForegroundFocusedPressed}" />
      </Style>
    </Style>

    <!--  Focused State  -->
    <Style Selector="^:focus-within:not(.no-focus-border)">
      <Style Selector="^ /template/ Border#HighlightBackground">
        <Setter Property="IsVisible" Value="True" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxDropDownGlyphForegroundFocused}" />
      </Style>
    </Style>

    <!--  Disabled State  -->
    <Style Selector="^:disabled">
      <Style Selector="^ /template/ Border#Background">
        <Setter Property="Background" Value="{DynamicResource ComboBoxBackgroundDisabled}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrushDisabled}" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxDropDownGlyphForegroundDisabled}" />
      </Style>
    </Style>

    <!--  Popup styling -->
    <Style Selector="^:dropdownopen /template/ Border#PopupBorder">
      <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBackgroundBorderBrushFocused}" />
      <Setter Property="BorderThickness" Value="{TemplateBinding FocusedBorderThickness}" />
    </Style>

    <Style Selector="^:not(:dropdown-open-from-top):not(:dropdown-overflow-left):not(:dropdown-overflow-right) /template/ Border#PopupBorder">
      <Setter Property="CornerRadius"
              Value="{
                        Binding CornerRadius,
                        RelativeSource={RelativeSource TemplatedParent},
                        Converter={x:Static DevoConverters.CornerRadiusExtractor}, 
                        ConverterParameter={x:Static CornerRadiusSubset.Bottom}
                    }" />
    </Style>
    <Style Selector="^:not(:dropdown-open-from-top):not(:dropdown-overflow-left):dropdown-overflow-right /template/ Border#PopupBorder">
      <Setter Property="CornerRadius"
              Value="{
                        Binding CornerRadius, 
                        RelativeSource={RelativeSource TemplatedParent},
                        Converter={x:Static DevoConverters.CornerRadiusExtractor}, 
                        ConverterParameter={x:Static CornerRadiusSubset.AllButTopLeft}
                    }" />
    </Style>
    <Style Selector="^:not(:dropdown-open-from-top):dropdown-overflow-left:not(:dropdown-overflow-right) /template/ Border#PopupBorder">
      <Setter Property="CornerRadius"
              Value="{
                        Binding CornerRadius, 
                        RelativeSource={RelativeSource TemplatedParent},
                        Converter={x:Static DevoConverters.CornerRadiusExtractor}, 
                        ConverterParameter={x:Static CornerRadiusSubset.AllButTopRight}
                    }" />
    </Style>

    <Style Selector="^:dropdown-open-from-top:not(:dropdown-overflow-left):not(:dropdown-overflow-right) /template/ Border#PopupBorder">
      <Setter Property="CornerRadius"
              Value="{
                        Binding CornerRadius,
                        RelativeSource={RelativeSource TemplatedParent},
                        Converter={x:Static DevoConverters.CornerRadiusExtractor}, 
                        ConverterParameter={x:Static CornerRadiusSubset.Top}
                    }" />
    </Style>
    <Style Selector="^:dropdown-open-from-top:not(:dropdown-overflow-left):dropdown-overflow-right /template/ Border#PopupBorder">
      <Setter Property="CornerRadius"
              Value="{
                        Binding CornerRadius, 
                        RelativeSource={RelativeSource TemplatedParent},
                        Converter={x:Static DevoConverters.CornerRadiusExtractor}, 
                        ConverterParameter={x:Static CornerRadiusSubset.AllButBottomLeft}
                    }" />
    </Style>
    <Style Selector="^:dropdown-open-from-top:dropdown-overflow-left:not(:dropdown-overflow-right) /template/ Border#PopupBorder">
      <Setter Property="CornerRadius"
              Value="{
                        Binding CornerRadius, 
                        RelativeSource={RelativeSource TemplatedParent},
                        Converter={x:Static DevoConverters.CornerRadiusExtractor}, 
                        ConverterParameter={x:Static CornerRadiusSubset.AllButBottomRight}
                    }" />
    </Style>

    <Style Selector="^:dropdown-overflow-left:dropdown-overflow-right /template/ Border#PopupBorder">
      <Setter Property="CornerRadius"
              Value="{
                        Binding CornerRadius, 
                        RelativeSource={RelativeSource TemplatedParent}
                    }" />
    </Style>

    <Style Selector="^:is-cut-by-screen-edge /template/ Border#PopupBorder">
      <Setter Property="CornerRadius"
              Value="{
                        Binding CornerRadius, 
                        RelativeSource={RelativeSource TemplatedParent}
                    }" />
    </Style>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type EditableComboBox}" TargetType="EditableComboBox">
    <Setter Property="Foreground" Value="{DynamicResource TextControlForeground}" />
    <Setter Property="Background" Value="{DynamicResource TextControlBackground}" />
    <Setter Property="CaretBrush" Value="{DynamicResource TextControlForeground}" />
    <Setter Property="SelectionBrush" Value="{DynamicResource TextControlSelectionHighlightColor}" />
    <Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True" />
    <Setter Property="ContextFlyout" Value="{x:Null}" />
    <Setter Property="Focusable" Value="True" />
    <Setter Property="IsTabStop" Value="True" />
    <Setter Property="ClipToBounds" Value="False" />

    <Setter Property="Padding" Value="10 0 0 0" />
    <Setter Property="FocusAdorner" Value="{x:Null}" />
    <Setter Property="MaxDropDownHeight" Value="504" />
    <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource EditableComboBoxBorderThickness}" />
    <Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="MinWidth" Value="{DynamicResource EditableComboBoxMinWidth}" />
    <Setter Property="Height" Value="{DynamicResource EditableComboBoxHeight}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </ControlTheme>
</ResourceDictionary>